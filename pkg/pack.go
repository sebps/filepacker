package pkg

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var conv = map[string]interface{}{"conv": fmtByteSlice}
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package {{ .Package }}

// Code generated by filepacker; DO NOT EDIT.

var repositoryInstance *repository

func init() {
	repositoryInstance = &repository {
		storage: make(map[string][]byte),
	}


	{{- range $name, $file := .Files }}
    	repositoryInstance.storage["{{ $name }}"] = []byte{ {{ conv $file }} }
	{{- end }}
}

type repository struct {
	storage map[string][]byte
}

func (r *repository) Get(filename string) []byte {
	return repositoryInstance.storage[filename]
}
`),
)

func fmtByteSlice(s []byte) string {
	builder := strings.Builder{}

	for _, v := range s {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}

	return builder.String()
}

type TemplateConfig struct {
	Package string
	Files   map[string][]byte
}

func Pack(sourceFolder string, targetFileName string, targetGoPackage string) {
	blobFilePath := fmt.Sprintf("%s.go", targetFileName)

	// Checking directory with files
	if _, err := os.Stat(sourceFolder); os.IsNotExist(err) {
		log.Fatal(fmt.Sprintf("directory %s does not exists", sourceFolder))
	}

	// Create map for filenames
	config := TemplateConfig{
		Package: targetGoPackage,
		Files:   make(map[string][]byte),
	}

	// Walking through embed directory
	err := filepath.Walk(sourceFolder, func(path string, info os.FileInfo, err error) error {
		relativePath := filepath.ToSlash(strings.TrimPrefix(path, filepath.FromSlash(sourceFolder)))

		if info.IsDir() {
			// Skip directories
			log.Println(path, "is a directory, skipping...")
			return nil
		} else {
			// If element is a simple file, embed
			log.Println(path, "is a file, packing in...")

			b, err := ioutil.ReadFile(path)
			if err != nil {
				// If file not reading
				log.Printf("Error reading %s: %s", path, err)
				return err
			}

			// Add file name to map
			config.Files[relativePath] = b
		}

		return nil
	})
	if err != nil {
		log.Fatal("Error walking through embed directory:", err)
	}

	// Create blob file
	f, err := os.Create(blobFilePath)
	if err != nil {
		log.Fatal("Error creating blob file:", err)
	}
	defer f.Close()

	// Create buffer
	builder := &bytes.Buffer{}

	// Execute template
	if err = tmpl.Execute(builder, config); err != nil {
		log.Fatal("Error executing template", err)
	}

	// Formatting generated code
	data, err := format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}

	// Writing blob file
	if err = ioutil.WriteFile(blobFilePath, data, os.ModePerm); err != nil {
		log.Fatal("Error writing blob file", err)
	}
}
